CREATE TABLE Mecze (
    id_meczu INT IDENTITY(1,1) PRIMARY KEY,
    data_meczu DATE NOT NULL,
    godzina TIME NOT NULL,
    id_gospodarza INT NOT NULL,  -- odwołanie do KLUB z Oracla (brak FK)
    id_goscia INT NOT NULL,      -- odwołanie do KLUB z Oracla
    id_stadionu INT NULL,        -- odwołanie do stadionu z Excela
    wynik NVARCHAR(20) NULL
);

-- Tabela WYDARZENIA MECZOWE
CREATE TABLE WydarzeniaMeczowe (
    id_wydarzenia INT IDENTITY(1,1) PRIMARY KEY,
    id_meczu INT NOT NULL,
    minuta INT NOT NULL,
    typ_wydarzenia NVARCHAR(50) NOT NULL,  -- np. gol, faul, kartka
    id_zawodnika INT NULL,                 -- odwołanie do Oracla (ZAWODNIK)
    dodatkowe_info NVARCHAR(255) NULL,

    FOREIGN KEY (id_meczu) REFERENCES Mecze(id_meczu)
);

CREATE UNIQUE INDEX UX_WydarzeniaMeczowe_Koniec
ON WydarzeniaMeczowe(id_meczu)
WHERE typ_wydarzenia = 'koniec';

CREATE TABLE Stadiony (
    id_stadionu INT IDENTITY(1,1) PRIMARY KEY,
    nazwa NVARCHAR(100) NOT NULL,
    miasto NVARCHAR(100) NOT NULL,
    pojemnosc INT,
    status BIT NOT NULL DEFAULT 1
);

ALTER TABLE Mecze
ADD CONSTRAINT fk_mecze_stadiony FOREIGN KEY (id_stadionu) REFERENCES Stadiony(id_stadionu);

EXEC sp_addlinkedserver 
    @server = 'ORACLE_LINK',
    @srvproduct = 'Oracle',
    @provider = 'OraOLEDB.Oracle',
    @datasrc = 'PD19C';
go
EXEC sp_addlinkedsrvlogin 
    @rmtsrvname = 'ORACLE_LINK', 
    @useself = 'false', 
    @locallogin = NULL, 
    @rmtuser = 'SYSTEM', 
    @rmtpassword = '12345';

go
EXEC sp_addlinkedsrvlogin 
    @rmtsrvname = 'ORACLE_LINK', 
    @useself = 'false', 
    @locallogin = NULL, 
    @rmtuser = 'APP_USER', 
    @rmtpassword = 'strongpassword';

go

CREATE PROCEDURE WyswietlKluby
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM OPENQUERY(ORACLE_LINK, 'SELECT * FROM SYSTEM.Klub');
END;

CREATE PROCEDURE WyswietlInfoOKlubie
    @nazwa_klubu NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @sql_menadzer NVARCHAR(MAX);
    DECLARE @zapytanie_menadzer NVARCHAR(MAX);

    SET @zapytanie_menadzer = '
        SELECT k.nazwa AS nazwa_klubu, m.imie, m.nazwisko, m.data_urodzenia
        FROM SYSTEM.MENADZER m
        JOIN SYSTEM.KLUB k ON m.id_klubu = k.id_klubu
        WHERE k.nazwa = ''' + REPLACE(@nazwa_klubu, '''', '''''') + '''';

    SET @sql_menadzer = 'SELECT * FROM OPENQUERY(ORACLE_LINK, ''' + REPLACE(@zapytanie_menadzer, '''', '''''') + ''')';

    PRINT '--- Menadżer klubu: ' + @nazwa_klubu;
    EXEC (@sql_menadzer);

    DECLARE @sql_zawodnicy NVARCHAR(MAX);
    DECLARE @zapytanie_zawodnicy NVARCHAR(MAX);

    SET @zapytanie_zawodnicy = '
        SELECT z.imie, z.nazwisko, z.data_urodzenia
        FROM SYSTEM.ZAWODNICY z
        JOIN SYSTEM.KLUB k ON z.id_klubu = k.id_klubu
        WHERE k.nazwa = ''' + REPLACE(@nazwa_klubu, '''', '''''') + '''';

    SET @sql_zawodnicy = 'SELECT * FROM OPENQUERY(ORACLE_LINK, ''' + REPLACE(@zapytanie_zawodnicy, '''', '''''') + ''')';

    PRINT '--- Zawodnicy klubu: ' + @nazwa_klubu;
    EXEC (@sql_zawodnicy);
END;

CREATE PROCEDURE ZmienStatusStadionu
    @nazwa NVARCHAR(100),
    @nowy_status BIT
AS
BEGIN
    UPDATE Stadiony
    SET status = @nowy_status
    WHERE nazwa = @nazwa;
END;

CREATE PROCEDURE DodajStadion
    @nazwa NVARCHAR(100),
    @miasto NVARCHAR(100),
    @pojemnosc INT,
    @status BIT = 1
AS
BEGIN
    INSERT INTO Stadiony (nazwa, miasto, pojemnosc, status)
    VALUES (@nazwa, @miasto, @pojemnosc, @status);
END;

CREATE PROCEDURE DodajMeczPoNazwach
    @data_meczu DATE,
    @godzina TIME,
    @nazwa_gospodarza NVARCHAR(100),
    @nazwa_goscia NVARCHAR(100),
    @id_stadionu INT = NULL,
    @wynik NVARCHAR(20) = NULL
AS
BEGIN
    DECLARE @id_gospodarza INT;
    DECLARE @id_goscia INT;

    SELECT @id_gospodarza = id_klubu
    FROM OPENQUERY(ORACLE_LINK, 
        'SELECT id_klubu, nazwa FROM SYSTEM.KLUB')
    WHERE nazwa = @nazwa_gospodarza;

    SELECT @id_goscia = id_klubu
    FROM OPENQUERY(ORACLE_LINK, 
        'SELECT id_klubu, nazwa FROM SYSTEM.KLUB')
    WHERE nazwa = @nazwa_goscia;

    IF @id_gospodarza IS NULL OR @id_goscia IS NULL
    BEGIN
        RAISERROR('Nie znaleziono jednego lub obu klubów w Oracle.', 16, 1);
        RETURN;
    END

    INSERT INTO Mecze (data_meczu, godzina, id_gospodarza, id_goscia, id_stadionu, wynik)
    VALUES (@data_meczu, @godzina, @id_gospodarza, @id_goscia, @id_stadionu, @wynik);
END;

CREATE PROCEDURE DodajWydarzenieMeczowe
    @id_meczu INT,
    @minuta INT,
    @typ_wydarzenia NVARCHAR(50),
    @imie NVARCHAR(50) = NULL,
    @nazwisko NVARCHAR(50) = NULL,
    @data_urodzenia DATE = NULL,
    @dodatkowe_info NVARCHAR(255) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_zawodnika INT = NULL;

    IF @minuta < 0 OR @minuta > 120
    BEGIN
        RAISERROR('Minuta musi być w zakresie 0–120.', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (
        SELECT 1 FROM (VALUES ('gol'), ('asysta'), ('zolta kartka'), ('czerwona kartka'), ('koniec')) AS Typy(typ)
        WHERE typ = @typ_wydarzenia
    )
    BEGIN
        RAISERROR('Niepoprawny typ wydarzenia.', 16, 1);
        RETURN;
    END

    IF @typ_wydarzenia <> 'koniec'
    BEGIN
        IF @imie IS NULL OR @nazwisko IS NULL OR @data_urodzenia IS NULL
        BEGIN
            RAISERROR('Brak danych zawodnika dla wybranego typu wydarzenia.', 16, 1);
            RETURN;
        END

        BEGIN TRY
            DECLARE @result TABLE (id_zawodnika INT);
            DECLARE @data_str VARCHAR(10) = CONVERT(VARCHAR(10), @data_urodzenia, 120);

            INSERT INTO @result (id_zawodnika)
            EXEC (
                'SELECT SYSTEM.detect_id(?, ?, TO_DATE(?, ''YYYY-MM-DD'')) AS id_zawodnika FROM DUAL',
                @imie, @nazwisko, @data_str
            ) AT ORACLE_LINK;

            SELECT @id_zawodnika = id_zawodnika FROM @result;

            IF @id_zawodnika IS NULL
            BEGIN
                RAISERROR('Nie znaleziono zawodnika w bazie Oracle.', 16, 1);
                RETURN;
            END
        END TRY
        BEGIN CATCH
            RAISERROR('Nie udało się pobrać ID zawodnika z Oracle.', 16, 1);
            RETURN;
        END CATCH
    END

    INSERT INTO WydarzeniaMeczowe (id_meczu, minuta, typ_wydarzenia, id_zawodnika, dodatkowe_info)
    VALUES (@id_meczu, @minuta, @typ_wydarzenia, @id_zawodnika, @dodatkowe_info);
END

 CREATE PROCEDURE PobierzZawodnikaZeStatystykami
    @imie NVARCHAR(100),
    @nazwisko NVARCHAR(100),
    @data_urodzenia DATE
AS
BEGIN
    DECLARE @sql NVARCHAR(MAX)
    DECLARE @data_urodzenia_str NVARCHAR(20)

    SET @data_urodzenia_str = CONVERT(NVARCHAR(10), @data_urodzenia, 120)

    SET @sql = '
    SELECT * FROM OPENQUERY(ORACLE_LINK, 
        ''SELECT * FROM SYSTEM.vw_zawodnik_statystyki
          WHERE imie = ''''' + @imie + ''''' 
          AND nazwisko = ''''' + @nazwisko + '''''
          AND data_urodzenia = TO_DATE(''''' + @data_urodzenia_str + ''''', ''''YYYY-MM-DD'''')'')'

    EXEC sp_executesql @sql
END

go

CREATE FUNCTION LiczbaMeczyNaStadionie(@id_stadionu INT)
RETURNS INT
AS
BEGIN
    DECLARE @liczba INT;
    SELECT @liczba = COUNT(*) FROM Mecze WHERE id_stadionu = @id_stadionu;
    RETURN @liczba;
END;

CREATE TRIGGER UnikalnaNazwaStadionu
ON Stadiony
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1 FROM inserted i
        JOIN Stadiony s ON s.nazwa = i.nazwa
    )
    BEGIN
        RAISERROR('Stadion o tej nazwie już istnieje.', 16, 1);
        RETURN;
    END

    INSERT INTO Stadiony (nazwa, miasto, pojemnosc, status)
    SELECT nazwa, miasto, pojemnosc, status FROM inserted;
END;

CREATE TRIGGER WalidacjaMeczu
ON Mecze
INSTEAD OF INSERT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_gospodarza INT;
    DECLARE @id_goscia INT;
    DECLARE @wynik NVARCHAR(20);
    DECLARE @data DATE;
    DECLARE @godzina TIME;

    SELECT 
        @id_gospodarza = id_gospodarza,
        @id_goscia = id_goscia,
        @wynik = wynik,
        @data = data_meczu,
        @godzina = godzina
    FROM inserted;

    IF @id_gospodarza = @id_goscia
    BEGIN
        RAISERROR('Gospodarz i gość nie mogą być tym samym klubem.', 16, 1);
        RETURN;
    END

    IF @wynik IS NOT NULL AND @wynik NOT LIKE '[0-9]%:[0-9]%'
    BEGIN
        RAISERROR('Niepoprawny format wyniku. Oczekiwany format: liczba:liczba, np. 2:1.', 16, 1);
        RETURN;
    END

    IF @wynik IS NOT NULL
    BEGIN
        DECLARE @gole1 INT;
        DECLARE @gole2 INT;

        BEGIN TRY
            SET @gole1 = CAST(LEFT(@wynik, CHARINDEX(':', @wynik) - 1) AS INT);
            SET @gole2 = CAST(SUBSTRING(@wynik, CHARINDEX(':', @wynik) + 1, LEN(@wynik)) AS INT);

            IF @gole1 < 0 OR @gole2 < 0
            BEGIN
                RAISERROR('Liczba goli nie może być ujemna.', 16, 1);
                RETURN;
            END
        END TRY
        BEGIN CATCH
            RAISERROR('Niepoprawny format wyniku (nie udało się sparsować liczby).', 16, 1);
            RETURN;
        END CATCH
    END

    INSERT INTO Mecze (data_meczu, godzina, id_gospodarza, id_goscia, id_stadionu, wynik)
    SELECT data_meczu, godzina, id_gospodarza, id_goscia, id_stadionu, wynik
    FROM inserted;
END;

CREATE OR ALTER TRIGGER trg_UpdateStats_AfterInsert
ON WydarzeniaMeczowe
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_zawodnika INT,
            @typ_wydarzenia NVARCHAR(50),
            @gole INT = 0,
            @asysty INT = 0,
            @zolte INT = 0,
            @czerwone INT = 0;

    SELECT TOP 1
        @id_zawodnika = id_zawodnika,
        @typ_wydarzenia = typ_wydarzenia
    FROM inserted;

    IF @id_zawodnika IS NULL OR @typ_wydarzenia = 'koniec'
        RETURN;

    IF @typ_wydarzenia = 'gol' SET @gole = 1;
    ELSE IF @typ_wydarzenia = 'asysta' SET @asysty = 1;
    ELSE IF @typ_wydarzenia = 'zolta kartka' SET @zolte = 1;
    ELSE IF @typ_wydarzenia = 'czerwona kartka' SET @czerwone = 1;

    DECLARE @sql NVARCHAR(MAX);
    SET @sql = '
    BEGIN
        SYSTEM.aktualizuj_statystyki(' 
        + CAST(@id_zawodnika AS NVARCHAR) + ', ' 
        + CAST(@gole AS NVARCHAR) + ', ' 
        + CAST(@asysty AS NVARCHAR) + ', ' 
        + CAST(@zolte AS NVARCHAR) + ', ' 
        + CAST(@czerwone AS NVARCHAR) + ', 0);
    END;';

    EXEC (@sql) AT ORACLE_LINK;
END;

CREATE OR ALTER TRIGGER trg_AktualizujMeczePoDodaniu
ON Mecze
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_gospodarza INT, @id_goscia INT;

    SELECT TOP 1
        @id_gospodarza = id_gospodarza,
        @id_goscia = id_goscia
    FROM inserted;

    DECLARE @Zawodnicy TABLE (id_zawodnika INT);

    DECLARE @sql NVARCHAR(MAX);

    SET @sql = '
        SELECT id_zawodnika 
        FROM OPENQUERY(ORACLE_LINK, 
            ''SELECT id_zawodnika FROM SYSTEM.Zawodnicy WHERE id_klubu = ' + CAST(@id_gospodarza AS NVARCHAR) + ''')';

    INSERT INTO @Zawodnicy (id_zawodnika)
    EXEC(@sql);

    SET @sql = '
        SELECT id_zawodnika 
        FROM OPENQUERY(ORACLE_LINK, 
            ''SELECT id_zawodnika FROM SYSTEM.Zawodnicy WHERE id_klubu = ' + CAST(@id_goscia AS NVARCHAR) + ''')';

    INSERT INTO @Zawodnicy (id_zawodnika)
    EXEC(@sql);

    DECLARE @id INT;
    DECLARE @sql_call NVARCHAR(MAX);

    DECLARE zawodnicy_cursor CURSOR FOR
        SELECT id_zawodnika FROM @Zawodnicy;

    OPEN zawodnicy_cursor;
    FETCH NEXT FROM zawodnicy_cursor INTO @id;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @sql_call = '
        BEGIN
            SYSTEM.aktualizuj_statystyki(' + CAST(@id AS NVARCHAR) + ', 0, 0, 0, 0, 1);
        END;';
        EXEC (@sql_call) AT ORACLE_LINK;

        FETCH NEXT FROM zawodnicy_cursor INTO @id;
    END

    CLOSE zawodnicy_cursor;
    DEALLOCATE zawodnicy_cursor;
END;

--testy
EXEC DodajStadion @nazwa = 'Narodowy', @miasto = 'Warszawa', @pojemnosc = 58000;

EXEC DodajMeczPoNazwach 
    @data_meczu = '2025-06-20',
    @godzina = '18:00',
    @nazwa_gospodarza = 'Barcelona',
    @nazwa_goscia = 'Real Madrid',
    @id_stadionu = 1,
    @wynik = '2:1';

select * from mecze

EXEC DodajWydarzenieMeczowe
    @id_meczu = 8,
    @minuta = 46,
    @typ_wydarzenia = 'gol',
    @imie = 'Szymon',
    @nazwisko = 'Muszynski',
    @data_urodzenia = '2003-09-09',
    @dodatkowe_info = 'gol lewa noge';

select * from WydarzeniaMeczowe
